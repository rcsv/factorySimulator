/**
 * しばらくの間のテストクラス。JUnit 等使わない。
 */
package org.rcsvp.pls;

/**
 * @author Tomohiro AWANE <Awane.Tomohiro@me.com>
 *
 */
public class Simulator {

  public static void main(String[] args) {
		//
		// まず場所的な問題として「工場」というものをオブジェクト化してみます。
		// 工場には工場長初め、班長さんに掃除をしている人等、様々な人が勤務していますので、
		// 膨大な情報を持つ必要があるかもしれません。
		//
		IFactory factory = new Factory( "MyFactory" ) ;
		
		//
		// 次に「工場」が持つであろう「生産ライン」というものをオブジェクト化してみます。
		// 生産ラインはそれぞれが自立的に稼働しており、タクトタイム毎に製品をくみ上げていきます。
		// 生産ラインにはそれぞれの組み付け工程や検査項目等がありますが、運転を止めなければならない
		// 場合、生産ラインは停止してしまいます。かといって、Java Thread 自体が止まる訳では
		// なさそうですな。生産ラインは、組み立てた時に既に一つの製品が出来上がるまでに必要な秒数
		// つまりタクトタイムがあり、これをベースに各工程が進んでいくような仕組みになる筈です。
		// 今回のラインのタクトタイムは 45 秒、ということにします。
		//
		IProductionLine line1 = new ProductionLine( "鉄の箱", 45 ) ;
		
		//
		// さて、工場の製造ラインは一つではないハズです。同じ製品を作っている生産ラインを表現する
		// ため、同じ手法でオブジェクト化を試みます。同じラインなのですが、設備が古いため、タクト
		// タイムは 60 秒必要です。
		// 
		IProductionLine line2 = new ProductionLine( "鉄の塊", 60 ) ;
		
		//
		// 生産ラインは、毎月、または毎日、取引先からの供給要望に応じて生産量を決定します。
		// 生産ラインはその要望に応じて、操業を継続していく事になります。タクトタイムに応じて、
		// そのノルマを設定していくのは自動設定ではなく、工場の管理部の仕事かもしれません。
		// 今回は各々の生産ラインが 3:4 のタクトタイムになっているため、比率に応じた生産量として
		// います。
		//
		line1.setNorm( 400 ) ;
		line2.setNorm( 300 ) ;

	}
}
